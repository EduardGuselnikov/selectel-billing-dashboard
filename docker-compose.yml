services:
  postgres:
    image: postgres:15
    container_name: selectel_postgres
    environment:
      POSTGRES_DB: ${DB_NAME}         # redash или что ты используешь
      POSTGRES_USER: ${DB_USER}       # redash или selectel_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # Пароль для пользователя redash (используется в init.sql)
      POSTGRES_REDASH_PASSWORD: ${REDASH_DATABASE_PASSWORD:-redash_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/10-init.sql
      - ./init-redash-user.sh:/docker-entrypoint-initdb.d/20-init-redash-user.sh
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 3s
      retries: 20

  redis:
    image: redis:7-alpine
    container_name: redash_redis
    restart: unless-stopped

  redash-server:
    image: redash/redash:10.1.0.b50633
    container_name: redash_server
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      REDASH_LOG_LEVEL: INFO
      REDASH_MULTI_ORG: "false"
      REDASH_WEB_WORKERS: "2"
      # ВАЖНО: в .env должны быть заданы:
      # REDASH_DATABASE_URL=postgresql://<DB_USER>:<DB_PASSWORD>@postgres:5432/<DB_NAME>
      # REDASH_REDIS_URL=redis://redis:6379/0
      # REDASH_COOKIE_SECRET=...
      # REDASH_SECRET_KEY=...
    ports:
      - "5000:5000"
    command: server
    restart: unless-stopped

  redash-worker:
    image: redash/redash:10.1.0.b50633
    container_name: redash_worker
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    environment:
      QUEUES: queries,scheduled_queries,celery
      WORKERS_COUNT: "2"
    command: worker
    restart: unless-stopped

  redash-scheduler:
    image: redash/redash:10.1.0.b50633
    container_name: redash_scheduler
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    env_file:
      - .env
    command: scheduler
    restart: unless-stopped

  selectel-etl:
    build: .
    container_name: selectel_etl
    env_file:
      - .env
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      SELECTEL_API_TOKEN: ${SELECTEL_API_TOKEN}
      SELECTEL_API_BASE_URL: ${SELECTEL_API_BASE_URL}
      ETL_INTERVAL_HOURS: ${ETL_INTERVAL_HOURS}
      LOG_LEVEL: ${LOG_LEVEL}
      # Переменные для настройки дашбордов Redash
      REDASH_URL: http://redash-server:5000
      REDASH_ADMIN_EMAIL: ${REDASH_ADMIN_EMAIL}
      REDASH_ADMIN_PASSWORD: ${REDASH_ADMIN_PASSWORD}
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  redash-setup:
    build: .
    container_name: redash_setup
    env_file:
      - .env
    environment:
      REDASH_URL: http://redash-server:5000
      REDASH_ADMIN_EMAIL: ${REDASH_ADMIN_EMAIL}
      REDASH_ADMIN_PASSWORD: ${REDASH_ADMIN_PASSWORD}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      - ./logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redash-server:
        condition: service_started
    command: python setup_redash_datasource.py
    restart: "no"  # Запускается только один раз
    profiles:
      - setup  # Запускается только при явном указании

volumes:
  postgres_data:
